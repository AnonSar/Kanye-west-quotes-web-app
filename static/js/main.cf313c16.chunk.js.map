{"version":3,"sources":["Components/Background-video/backgroundVideo.mp4","Components/Button-Section/button-section.js","Components/Quote-Container/quote-container.js","Components/Heading-Section/heading-section.js","Components/Background-video/background-video.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ButtonSection","className","style","cursor","onClick","this","props","handleButtonClick","Component","QuoteContainer","state","quote","isLoading","getQuoteFunction","bind","axios","get","then","response","setState","data","catch","error","HeadingSection","BackgroundVideo","Props","autoPlay","muted","loop","src","video","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,6C,wMCkB5BC,E,iLAdX,OACE,yBAAKC,UAAU,kBACb,4BACEC,MAAO,CAAEC,OAAQ,WACjBF,UAAU,eACVG,QAASC,KAAKC,MAAMC,mBAHtB,uB,GAJoBC,a,iBC8CbC,E,YA3Cb,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CACXC,MAAO,aACPC,WAAW,GAEb,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBANP,E,iFAUjBT,KAAKQ,qB,yCAKa,IAAD,OACjBE,IACGC,IAAI,0BACJC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZR,MAAO,MAAQO,EAASE,KAAKT,MAAQ,MACrCC,WAAW,OAGdS,OAAM,SAAAC,GACL,EAAKH,SAAS,CACZR,MAAO,gC,+BAMb,OACE,6BACE,yBAAKV,UAAU,oBACb,yBAAKA,UAAU,mBAAmBI,KAAKK,MAAMC,QAE/C,kBAAC,EAAD,CAAiBJ,kBAAmBF,KAAKQ,wB,GAtCpBL,aCUde,EAXQ,WACrB,OACE,6BACE,yBAAKtB,UAAU,mBACb,wBAAIA,UAAU,gBAAd,sBAEF,kBAAC,EAAD,QCMSuB,EAXS,SAAAC,GACtB,OACE,6BACE,2BAAOC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAAC3B,UAAU,mBACnC,4BAAQ4B,IAAOC,IAAOC,KAAK,eAE7B,kBAAC,EAAD,QCDSC,E,iLAJX,OAAO,kBAAC,EAAD,U,GAFOxB,aCSEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.cf313c16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backgroundVideo.4f878a42.mp4\";","import React, { Component } from \"react\";\n\nclass ButtonSection extends Component {\n  render() {\n    return (\n      <div className=\"button-section\">\n        <button\n          style={{ cursor: \"pointer\" }}\n          className=\"quote-button\"\n          onClick={this.props.handleButtonClick}\n        >\n          GET-ME-A-QOUTE\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ButtonSection;\n","import React, { Component } from \"react\";\nimport ButtonComponent from \"../Button-Section/button-section\";\nimport axios from \"axios\";\n\nclass QuoteContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"LOADING...\",\n      isLoading: true\n    };\n    this.getQuoteFunction = this.getQuoteFunction.bind(this);\n  }\n\n  componentDidMount() {\n    this.getQuoteFunction();\n  }\n\n  // Function for fetching the quote from the API\n\n  getQuoteFunction() {\n    axios\n      .get(\"https://api.kanye.rest\")\n      .then(response => {\n        this.setState({\n          quote: \" ' \" + response.data.quote + \" ' \",\n          isLoading: false\n        });\n      })\n      .catch(error => {\n        this.setState({\n          quote: \"An error has occured !\"\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"center-container\">\n          <div className=\"quote-container\">{this.state.quote}</div>\n        </div>\n        <ButtonComponent handleButtonClick={this.getQuoteFunction} />\n      </div>\n    );\n  }\n}\n\nexport default QuoteContainer;\n","import React from \"react\";\nimport QuoteContainer from \"../Quote-Container/quote-container\";\n\nconst HeadingSection = () => {\n  return (\n    <div>\n      <div className=\"heading-section\">\n        <h1 className=\"heading-name\">KANYE WEST QUOTES</h1>\n      </div>\n      <QuoteContainer />\n    </div>\n  );\n};\n\nexport default HeadingSection;\n","import React from \"react\";\nimport video from \"./backgroundVideo.mp4\";\nimport HeadingSection from \"../Heading-Section/heading-section\";\n\nconst BackgroundVideo = Props => {\n  return (\n    <div>\n      <video autoPlay muted loop className=\"backgroundVideo\">\n        <source src = {video} type=\"video/mp4\" />\n      </video>\n      <HeadingSection />\n    </div>\n  );\n};\n\nexport default BackgroundVideo;\n","import React, { Component } from \"react\";\nimport BackgroundVideo from \"./Components/Background-video/background-video\";\n\nclass App extends Component {\n  render() {\n    return <BackgroundVideo />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}